{"version":3,"sources":["webpack:///webpack/bootstrap 65fbe0c3b0086aba4686","webpack:///./java_script/calendarDatesUtils.js","webpack:///./java_script/calendarVisualRender.js","webpack:///./java_script/app.js","webpack:///./java_script/calendarDataManipulations.js","webpack:///./java_script/calendarStaticPartInit.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;AC7DA;AAAA;AACA;AACA,wCAAwC,gBAAgB;AACxD;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;;;;;;;ACtBA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA,gEAAgE;AAChE;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9BC;;;AAQA;;AAKA;;AAED;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;AChDsC;;AAOrC;;;AAGD;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C,UAAU;AACzD;;;AAGA;AACA;AACA,6EAA6E;AAC7E;;AAEA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;;AAEA,sKAAiG;AACjG;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChEC;;AAED;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,yBAAyB;AACtE,4CAA4C,2GAAsC;AAClF;;AAEA;AACA;AACA;AACA,mFAAmF,QAAQ;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA","file":"build/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 65fbe0c3b0086aba4686","const getLocalMonthNameFromDate = (date) =>{\n    let locale = \"Uk-uk\";\n    return date.toLocaleString(locale, { month: \"long\" });\n};\n\n\nconst getMonthdaysNumberInMonth = (date) => {\n    const d= new Date(date.getFullYear(), date.getMonth()+1, 0);\n    return d.getDate();\n};\n\n\nconst convertWeekdayIndexAs0IsForMonday = (dayIf0IsForSunday) => {\n    if (dayIf0IsForSunday === 0) // case if our day is Sunday\n        return 6;\n    else\n        return dayIf0IsForSunday-1;\n};\n\n\nconst getDateDataFromCalendar = (calendar) => {\n    return new Date(calendar.dataset.year, calendar.dataset.month);\n};\n\n\nexport {getLocalMonthNameFromDate,\n    getMonthdaysNumberInMonth,\n    convertWeekdayIndexAs0IsForMonday,\n    getDateDataFromCalendar\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./java_script/calendarDatesUtils.js\n// module id = 0\n// module chunks = 0","const markWeekendsNames = (calendar) => {\n    let daysList = calendar.querySelectorAll('.calendar__day-names');\n    console.log(daysList);\n    daysList[6].classList.add (\"calendar__day_weekend\");\n    daysList[5].classList.add (\"calendar__day_weekend\");\n};\n\n\nconst markWeekendsDates = (calendar) => {\n    let dateBuf = new Date(calendar.dataset.year, calendar.dataset.month);\n    let datesNodes = calendar.querySelectorAll('.calendar__day:not(.calendar__day-names)'); // selecting only date nodes\n    console.log(datesNodes);\n    let dateNode;\n    for (let dateIndex = 0; dateIndex < datesNodes.length; dateIndex ++ ){\n        dateNode = datesNodes[dateIndex];\n        dateBuf.setDate(parseInt(dateNode.innerHTML));\n        if ( dateBuf.getDay() === 0 || dateBuf.getDay() === 6 ){ // if Sunday or Saturday\n            dateNode.classList.add(\"calendar__day_weekend\");\n        }\n\n    }\n};\n\n\nconst countFillerSizeForDays = (prototypeStyle, offsetNumber) => {\n    return offsetNumber\n        * ( parseInt(prototypeStyle[\"width\"], 10) +\n            2 * parseInt(prototypeStyle[\"marginLeft\"], 10)) +\n        parseInt(prototypeStyle[\"marginLeft\"], 10);\n};\n\nconst setLeftMarginForFirstDay = (firstDayElement, firstDayWeekIndexFromMonday) => {\n    const dayStyle = window.getComputedStyle(firstDayElement);\n    const fillerSize = countFillerSizeForDays(dayStyle, firstDayWeekIndexFromMonday);\n    firstDayElement.style.marginLeft = fillerSize + \"px\";\n};\n\n\n\nexport {\n    markWeekendsNames,\n    markWeekendsDates,\n    countFillerSizeForDays,\n    setLeftMarginForFirstDay\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./java_script/calendarVisualRender.js\n// module id = 1\n// module chunks = 0","import {\n    markWeekendsNames,\n    markWeekendsDates,\n    countFillerSizeForDays,\n    setLeftMarginForFirstDay\n} from './calendarVisualRender';\n\n\nimport {\n    calendarMoveToNextMonth,\n    calendarMoveToPrevMonth,\n    setDateDataOnCalendar ,\n    fillDates\n} from './calendarDataManipulations';\n\nimport {\n    createCallendarNode,\n    DAY_NAMES\n} from './calendarStaticPartInit';\n\ndebugger;\n\n\n\n\nconst refreshCalendarDatesData = (calendar, calendarDate) => {\n    fillDates(calendarDate, calendar);\n    calendar = setDateDataOnCalendar(calendar, calendarDate);\n    markWeekendsDates(calendar);\n};\n\n\n\n\n// creating calendar node, filling it\nconst calendarDate = new Date();\nconsole.log(\"Initial date is \" + calendarDate.toDateString());\n\ndocument.body.innerHTML += createCallendarNode(calendarDate, DAY_NAMES);\nlet calendar = document.querySelector('.calendar');\nmarkWeekendsNames(calendar);\nrefreshCalendarDatesData(calendar, calendarDate);\n\n\n// adding action buttons\ncalendar\n    .querySelector('.navigaton__swipe-button-prev-month')\n    .addEventListener(\"click\", calendarMoveToPrevMonth);\n\ncalendar\n    .querySelector('.navigaton__swipe-button-next-month')\n    .addEventListener(\"click\", calendarMoveToNextMonth);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./java_script/app.js\n// module id = 2\n// module chunks = 0","import {\n    getLocalMonthNameFromDate,\n    getMonthdaysNumberInMonth,\n    convertWeekdayIndexAs0IsForMonday} from './calendarDatesUtils'\n\nimport {\n    markWeekendsNames,\n    markWeekendsDates,\n    countFillerSizeForDays,\n    setLeftMarginForFirstDay\n} from './calendarVisualRender';\n\n\nconst setDateDataOnCalendar = (calendar, dateObject) => {\n    calendar.dataset.year = dateObject.getFullYear();\n    calendar.dataset.month = dateObject.getMonth();\n    return calendar;\n};\n\nconst createDayNodeHTML = (dayNumber) => {\n    return ` <section class=\"calendar__day\"> ${dayNumber} </section> ` ;\n};\n\n\n// I've decided not to create fake nodes, but make a real offset instead\nconst fillDates = (date, calendar) => {\n    const newDateExamplar = new Date(date.getFullYear(), date.getMonth(), 1); // to avoid mutations of input and set date to 1\n    const daysInMonth = getMonthdaysNumberInMonth(newDateExamplar);\n\n    const dates_panel = calendar.querySelector(\".calendar__dates-panel\");\n    dates_panel.innerHTML = \"\";\n    for (let day = 1; day <= daysInMonth; day ++){\n        dates_panel.innerHTML += createDayNodeHTML(day);\n    }\n\n    const firstDayOfMonthWeekIndex = convertWeekdayIndexAs0IsForMonday(newDateExamplar.getDay()); // weekday if 0 is for sunday\n    setLeftMarginForFirstDay(dates_panel.firstElementChild, firstDayOfMonthWeekIndex);\n    return calendar.innerHTML;\n};\n\n\nconst calendarMoveToNextMonth  = (ev) => {\n    let calendar = document.querySelector(\".calendar\");\n    calendar.dataset.month ++;\n    if ( parseInt(calendar.dataset.month) === 12) {\n        calendar.dataset.month = 0;\n        calendar.dataset.year ++;\n        calendar.querySelector('.calendar__yearnumber').innerHTML = calendar.dataset.year;\n    }\n    let date = new Date(calendar.dataset.year, calendar.dataset.month);\n    calendar.querySelector('.calendar__monthname').innerHTML = getLocalMonthNameFromDate(date);\n    fillDates(date, calendar);\n    markWeekendsDates(calendar);\n};\n\nconst calendarMoveToPrevMonth  = (ev) => {\n    let calendar = document.querySelector(\".calendar\");\n    calendar.dataset.month --;\n    if ( parseInt(calendar.dataset.month) === -1) {\n        calendar.dataset.month = 11 ;\n        calendar.dataset.year --;\n        console.log(calendar.dataset.year);\n        calendar.querySelector('.calendar__yearnumber').innerHTML = calendar.dataset.year;\n    }\n    let date = new Date(calendar.dataset.year, calendar.dataset.month);\n    calendar.querySelector('.calendar__monthname').innerHTML = getLocalMonthNameFromDate(date);\n    fillDates(date, calendar);\n    markWeekendsDates(calendar);\n};\n\n\nexport {\n    calendarMoveToNextMonth,\n    calendarMoveToPrevMonth,\n    setDateDataOnCalendar ,\n    fillDates\n} ;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./java_script/calendarDataManipulations.js\n// module id = 3\n// module chunks = 0","import {\n    getLocalMonthNameFromDate,\n    getMonthdaysNumberInMonth,\n    convertWeekdayIndexAs0IsForMonday\n} from './calendarDatesUtils'\n\nconst DAY_NAMES  = [ 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Нд' ];\n\n/* creates  static part as plain HTML */\nconst createCallendarNode = ( dateObject, dayNames) => {\n    return  `\n    <section class=\"calendar\">\n\n    <nav class=\"calendar-navigation\">\n        <button class=\"navigaton__swipe-button-prev-month\"> < </button>\n        <button class=\"navigaton__swipe-button-next-month\"> > </button>\n    </nav>\n    \n    <h2>\n        <div class=\"calendar__yearnumber\"> ${dateObject.getFullYear()} </div>\n        <div class=\"calendar__monthname\"> ${getLocalMonthNameFromDate(dateObject)} </div>\n    </h2>\n\n    <header class=\"calendar__weekday-panel\">\n    `\n        +\n        dayNames.map (dayName=> `<div class=\"calendar__day calendar__day-names\"> ${dayName} </div>`).join(\"\")\n        +\n        `        \n    </header>\n    <section class = \"calendar__dates-panel\"></section>\n</section> \n`\n};\n\nexport { createCallendarNode , DAY_NAMES};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./java_script/calendarStaticPartInit.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}