// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

const findDivisorsNum = (number) => {
    let divisorsNum = 0;

    let rootOfNumber = Math.sqrt(number);
    for (let i = 1; i < rootOfNumber; i++) {
        if (number % i == 0)
            divisorsNum += 2
    }
    if (rootOfNumber * rootOfNumber == number)
        divisorsNum++;

    return divisorsNum;
};

function findFirstTriangleNumberWithNDivisors(divisorsNum) {
    let triangleNumber = 1;
    let triangleValue = 1;
    while (findDivisorsNum(triangleValue) <= divisorsNum) {
        triangleNumber++;
        triangleValue += triangleNumber;
    }
    return triangleValue;
}

// Test case
// Answer: 28
console.log(findFirstTriangleNumberWithNDivisors(5));

// Task
// Answer: 76576500
console.log(findFirstTriangleNumberWithNDivisors(500));